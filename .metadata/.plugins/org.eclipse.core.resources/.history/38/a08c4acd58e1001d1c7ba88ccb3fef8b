package ar.edu.unlp.info.oo2.ej12;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.Year;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class DecodificadorTest {
	
	Pelicula thor;
	Pelicula capitanAmerica;
	Pelicula ironMan;
	Pelicula dunkirk;
	Pelicula rocky;
	Pelicula rambo;
	
	Decodificador decodificador;
	
	@BeforeEach
	void setUp() throws Exception {
		thor = new Pelicula("Thor", Year.of(2007), 7.9);
		capitanAmerica = new Pelicula("Capitan America", Year.of(2016), 7.8);
		ironMan = new Pelicula("Capitan America", Year.of(2010), 7.9);
		dunkirk = new Pelicula("Capitan America", Year.of(2017), 7.9);
		rocky = new Pelicula("Capitan America", Year.of(1976), 8.1);
		rambo = new Pelicula("Capitan America", Year.of(1979), 7.8);
		
		thor.agregarSimilar(capitanAmerica);
		thor.agregarSimilar(ironMan);
		capitanAmerica.agregarSimilar(ironMan);
		rocky.agregarSimilar(rambo);
		
		decodificador = new Decodificador();
		
		decodificador.agregarAGrilla(thor);
		decodificador.agregarAGrilla(capitanAmerica);
		decodificador.agregarAGrilla(ironMan);
		decodificador.agregarAGrilla(dunkirk);
		decodificador.agregarAGrilla(rocky);
		decodificador.agregarAGrilla(rambo);
		
		decodificador.agregarAReproducidas(thor);
		decodificador.agregarAReproducidas(rocky);
	}
    @Test
    public void testRecomendar() {
    	List<Pelicula> lista;
    	
    	//default es por Novedad
    	lista = decodificador.recomendar();
    	assertTrue(lista.contains(capitanAmerica));
        assertTrue(lista.contains(ironMan));
        assertTrue(lista.contains(dunkirk));
    	
    	decodificador.setCriterio(new SugerenciaDeSimilitud(decodificador));
        lista = decodificador.recomendar();
        assertTrue(lista.contains(capitanAmerica));
        assertTrue(lista.contains(ironMan));
        assertTrue(lista.contains(rambo));
        
        decodificador.setCriterio(new SugerenciaDePuntaje(decodificador));
        lista = decodificador.recomendar();
        assertTrue(lista.contains(capitanAmerica));
        assertTrue(lista.contains(ironMan));
        assertTrue(lista.contains(dunkirk));
    }
}